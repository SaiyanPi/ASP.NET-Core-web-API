- RolesAuthorizationRequirement class consists of the following code:

    public class RolesAuthorizationRequirement : AuthorizationHandler<RolesAuthorizationRequirement>,
        IAuthorizationRequirement
    {
        public RolesAuthorizationRequirement(IEnumerable<string> allowedRoles)
        {
            ArgumentNullThrowHelper.ThrowIfNull(allowedRoles);

            if (!allowedRoles.Any())
            {
                throw new InvalidOperationException(Resources.Exception_RoleRequirementEmpty);
            }
            AllowedRoles = allowedRoles;
        }

        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, RolesAuthorizationRequirement requirement)
        {
            if (context.User != null)
            {
                var found = false;

                foreach (var role in requirement.AllowedRoles)
                {
                    if (context.User.IsInRole(role))
                    {
                        found = true;
                        break;
                    }
                }

                if (found)
                {
                    context.Succeed(requirement);
                }
            }
            return Task.CompletedTask;
        }

        public override string ToString()
        {
            var roles = $"User.IsInRole must be true for one of the following roles: ({string.Join("|", AllowedRoles)})";

            return $"{nameof(RolesAuthorizationRequirement)}:{roles}";
        }
    }
    
    -> when a RolesAuthorizationRequirement instance is instantiated, it accepts a collection of roles
        from the constructor
    -> then it uses HandleRequirementAsync() method to check whether the user is in the role. if the
        user is in the role, it calls the context.Succeed() method to set the Succeed property to true.
        otherwise, it sets the succeeded property to false.

- If you check the implementation of the ClaimsAuthorizationRequirement class, you will find it is 
    similar to the RolesAuthorizationRequirement class. It accepts claimType and a set of allowValues
    and checks whether the user has the claim, and whether the claim value is in the allowValues set.

_____________________________________________________________________________________________________________

The next question is WHO IS RESPONSIBLE FOR CALLING THESE METHODS?

- in the Program file, we have the app.UseAuthorization() method, which is used to add the 
    authorization middleware. If we check the source code on the UseAuthoirization method.

    // source code of the UseAuthoirization method
    public static IApplicationBuilder UseAuthorization(this IApplicationBuilder app)
    {
        // omitted
        return app.UseMiddleware<AuthorizationMiddlewareInternal>();
    }

- if we continue pressing F12 on AuthorizationMiddlewareInternal, we'll see the following code in
    Invoke() method:

    // Omitted for brevity
    var authorizeData = endpoint?.Metadata.GetOrderedMetadata<IAuthorizeData>() ?? Array.
        Empty<IAuthorizeData>();
    var policies = endpoint?.Metadata.GetOrderedMetadata<AuthorizationPolicy>() ?? Array.
        Empty<AuthorizationPolicy>();
    // Omitted for brevity
    var policyEvaluator = context.RequestServices.GetRequiredService<IPolicyEvaluator>();
    var authenticateResult = await policyEvaluator.AuthenticateAsync(policy, context);
    // Omitted for brevity
    var authorizeResult = await policyEvaluator.AuthorizeAsync(policy, authenticateResult!, context, 
        resource);
    // Omitted for brevity

    -> AuthorizationMiddleware class gets the policies from the endpoint metadata and then calls the
        IPolicyEvaluator.AuthenticateAsync() method to check whether the user is authenticated, after
        which it calls the IPolicyEvaluator.AuthorizeAsync() method to check whether the user is
        authorized. 
    -> IPolicyEvaluator interface is defined as follows:

        public interface IPolicyEvaluator
        {
            Task<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
            Task<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, 
                AuthenticateResult authenticationResult, HttpContext context, object? resource);
        }

    -> the default implementation of IPolicyEvaluator has been injected into the DI container brevity
        the ASP.NET Core framework.
    -> we can find the source code of the PolicyEvaluator class here
        (https://source.dot.net/#Microsoft.AspNetCore.Authorization.Policy/PolicyEvaluator.cs)
        you will see that IAuthorizationService object injected into it. If we click on
        IAuthorizationService, we can see it is defined as:
        
        public interface IAuthorizationService
        {
            Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object? resource, 
                IEnumerable<IAuthorizationRequirement> requirements);
            Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object? resource, 
                string policyName);
        }
        * with that we've found the IAuthorizationRequirement class we described earlier.

    -> You can find the source code of the default implementation of IAuthorizationService
        here: https://source.dot.net/#Microsoft.AspNetCore.Authorization/DefaultAuthorizationService.cs. 
        It is also injected into the DI container by the framework.
-----------------------------------------------------------------------------------------------------------

we end up with the following call stack.

1) Define the authorization policy in the Program class.
2) Apply the authorization policy to the endpoint.
3) Apply the authorization policy to the pipeline.
4) The request comes in with the Authorization header, which can be retrieved from the HttpContext object.
5) AuthorizationMiddleware calls the IPolicyEvaluator.AuthorizeAsync() method.
6) The IPolicyEvaluator.AuthorizeAsync() method calls the IAuthorizationService.AuthorizeAsync() method.
7) The IAuthorizationService.AuthorizeAsync() method calls the IAuthorizationHandler.HandleAsync() method
    to check whether the user is authorized.