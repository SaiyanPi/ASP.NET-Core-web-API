Using a strong password policy:

- create a simple authentication project(PasswordPolicyDemo) as steps mentioned in topic number 2.

Now,

a) specify the password policy in Program.cs file as:

    builder.Services.Configure<IdentityOptions>(options =>
    {
        // Password settings
        options.Password.RequireDigit = true;
        options.Password.RequireLowercase = true;
        options.Password.RequireNonAlphanumeric = true;
        options.Password.RequireUppercase = true;
        options.Password.RequiredLength = 8;
        options.Password.RequiredUniqueChars = 1;
        // User settings
        options.User.AllowedUserNameCharacters =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+";
        options.User.RequireUniqueEmail = true;
    });

    -> The preceding code is easy to understand. In this example, we require the password to contain at
        least one uppercase letter, one lowercase letter, one number, and one special character, and
        the length of the password should be at least 8 characters. We also require the user’s email
        to be unique. So, if a user tries to register with an email that is already in use, the
        registration will fail. Now, the user’s password should be hard to guess.
    -> try registering the new user with password that doesn't meet the above criteria. In order to create
        a user, user's password must fulfill the above password settings.

---------------------------------------------------------------------------------------------------------------

LOCKING ACCOUNT IF THE MULTIPLE SIGNIN ATTEMPTS WITH WRONG PASSWORD:

- We can also enforce the password policy when the user fails to log in. For example, if the user fails
    to log in three times, the account will be locked for 5 minutes.
    This can help prevent brute-force attacks.

A) Update the Program.cs file as:

    builder.Services.Configure<IdentityOptions>(options =>
    {
        // Omitted for brevity
        // Lockout settings
        options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
        options.Lockout.MaxFailedAccessAttempts = 3;
        options.Lockout.AllowedForNewUsers = true;
    });

    -> this works when we use SignInManager.CheckPasswordSignInAsync() method to sign in.
    -> upto this time we've used UserManager so next we need to inject SignInManager into the Controller

B) Inject SignInManager into the AccountController file and update the Login method as:

    public class AccountController(UserManager<AppUser> userManager, IConfiguration configuration,
    SignInManager<AppUser> signInManager)
    : ControllerBase
    {
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            // Check if the model is valid
            if (ModelState.IsValid)
            {
                var user = await userManager.FindByNameAsync(model.UserName);
                if (user != null)
                {
                    var result = await signInManager.CheckPasswordSignInAsync(user,model.Password, 
                        lockoutOnFailure: true);
                    if (result.Succeeded)
                    {
                        var token = GenerateToken(model.UserName);
                        return Ok(new { token });
                    }
                }
            // If the user is not found, display an error message
            ModelState.AddModelError("", "Invalid username or password");
            }
            return BadRequest(ModelState);
        }
    }

    -> preceding code uses the SignInManager.CheckPasswordSignInAsync() method to sign in, which has
        a parameter named lockoutOnFailure that specifies whether the account should be locked out when
        the user fails to log in. The default value is false, so we need to use true to enable the
        lockout feature.
C) Note that SignInManager is not available by default when we use AddIdentityCore<AppUser>() in
    the Program.cs file. In this case, we need to explicitly add the SignInManager service to the
    ConfigureServices() method as: 

        builder.Services.AddIdentityCore<AppUser>()
            // explicitly adding SignInManager for Lockout setting
            .AddSignInManager()
            // omitted

- now if we attempt 3 login with wrong password, account will be locked out of the system for 5
    minutes. During this period, you will not be able to access the system, even if you enter the
    correct password. After those 5 minutes have elapsed, you will be able to log in again.
