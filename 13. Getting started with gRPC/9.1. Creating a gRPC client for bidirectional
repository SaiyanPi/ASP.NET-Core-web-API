Creating a gRPC client for bidirectional RPC:

1) Create a BidirectionalStreamingClient.cs file as:

    internal class BidirectionalStreamingClient
    {
        public async Task SendMessage()
        {
            using var channel = GrpcChannel.ForAddress("https://localhost:5192");
            var client = new Chat.ChatClient(channel);
            // Create a streaming request
            using var streamingCall = client.SendMessage();
            Console.WriteLine("Starting a background task to receive messages...");
            var responseReaderTask = Task.Run(async () =>
            {
                await foreach (var response in streamingCall.ResponseStream.ReadAllAsync())
                {
                    Console.WriteLine(response.Message);
                }
            });
            Console.WriteLine("Starting to send messages...");
            Console.WriteLine("Input your message then press enter to send it.");
            while (true)
            {
                var message = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(message))
                {
                    break;
                }
                await streamingCall.RequestStream.WriteAsync(new
                ChatMessage
                {
                    Message = message
                });
            }
            Console.WriteLine("Disconnecting...");
            await streamingCall.RequestStream.CompleteAsync();
            await responseReaderTask;
        }
    }

    * Because we use a console application to call the bidirectional streaming service, we need to use
        a background task to read the stream response messages.
    * ReadAllAsync() method returns an IAsyncEnumerable<T> object, which can be iterated over using
        the await foreach statement.
    * In the background task, we use the await foreach statement to iterate over the stream response
        messages and print them to the console.
    * Additionally, we use a while loop to read the input from the console and send the stream
        request messages to the server in the main thread. The while loop ends when the user enters
        an empty string.
    * At the end of the method, we call the RequestStream.CompleteAsync() method to indicate that the
        stream request message is complete so that the server can finish processing the stream request
        messages gracefully.

2) In the Program.cs file of the GrpcDemo.Client project, call the SendMessage() method, as follows:

    var bidirectionalStreamingClient = new BidirectionalStreamingClient();
    await bidirectionalStreamingClient.SendMessage();

3) To secure the gRPC channel using TLS(Transport Layer Security), we need to run the gRPC service
    with HTTPS as:

    cmd: dotnet run --urls=https://localhost:5192 

4) We've ran our gRPC server now let's run the gRPC client in the different terminal.
    Now we will be able to see the following output in the gRPC client terminal.

        Hello, World!
        Starting background task to receive messages...
        Starting to send messages...
        Input your message then press enter to send it.
        How are you?
        You said: HOW ARE YOU?
        What is ASP.NET Core?
        You said: WHAT IS ASP.NET CORE?
        Disconnecting...