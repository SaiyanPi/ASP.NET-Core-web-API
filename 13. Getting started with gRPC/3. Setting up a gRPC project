Setting up a new gRPC project:

A) Creating a project:
    1. VS Code 
        cmd: dotnet new grpc -o GrpcDemo
        -> -o option specifies the output directory

    2. VS 2022
        - select the ASP.NET Core gRPC Service template when creating a new project
    
B) Understanding the gRPC project structure:
    - The project structure of a gRPC project has some differences from a RESTful API project. There
        is no Controllers folder in the gRPC project. Instead, there is a Protos folder, which
        contains the proto files.
    - The greet.proto file is the proto file that defines the gRPC service and messages. we can think
        of this file as the Swagger file (OpenAPI specification). 
        It is the contract of the gRPC service.
    - gRPC uses protobuf as the default data serialization format.
    - In a proto file, you can use // to add comments. To add multi-line comments, you can use
        /* ... */.
    - NOTE: VS Code does not provide syntax highlighting for proto files by default. You can install
            some extensions, such as vscode-proto3, to enable syntax highlighting.

    --------------------------------------------------------------------------------------------------
    
    # (greet.proto)

    - in the file greet.proto
        a) we define a service named Greeter with a method named SayHello().
        b) SayHello() method takes a HelloRequest message as input and returns a HelloReply message
            as output.
        c) both HelloRequest and HelloReply messages have string properties named name and message
            respectively.
    ---------------------------------------------------------------------------------------------------
    
    #(GrpcDemo.csproj)

        <Project Sdk="Microsoft.NET.Sdk.Web">

            <PropertyGroup>
                <TargetFramework>net8.0</TargetFramework>
                <Nullable>enable</Nullable>
                <ImplicitUsings>enable</ImplicitUsings>
            </PropertyGroup>

            <ItemGroup>
                <Protobuf Include="Protos\greet.proto" GrpcServices="Server" />
            </ItemGroup>

            <ItemGroup>
                <PackageReference Include="Grpc.AspNetCore" Version="2.57.0" />
            </ItemGroup>

        </Project>
 
        a) Grpc.AspNetCore: This package provides the gRPC server library for ASP.NET Core. It
            also references the Grpc.Tools package, which provides the code-generation tooling.
        b) Protobuf item group includes the proto file. The GrpcServices attribute specifies
            the type of code generated by the proto file. It can be set to the following values:
                • None: No code is generated
                • Client: This option only generates client-side code
                • Server: This option only generates server-side code
                • Both: This option generates both client-side code and server-side code. It is the
                        default value
        c) If you have multiple proto files, you can add multiple Protobuf items to the ItemGroup
            element.
    ---------------------------------------------------------------------------------------------------
    
    #(GreeterService.cs)

    - this contains the implementation of the Greeter service.

        public class GreeterService : Greeter.GreeterBase
        {
            private readonly ILogger<GreeterService> _logger;
            public GreeterService(ILogger<GreeterService> logger)
            {
                _logger = logger;
            }

            public override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)
            {
                return Task.FromResult(new HelloReply
                {
                    Message = "Hello " + request.Name
                });
            }
        }

        a) The GreeterService class inherits from the GreeterBase class, which is generated by the
            proto file.
        b) It has a SayHello() method  which takes a HelloRequest object as input and returns a
            HelloReply object as output. which matches the definition of SayHello() method as
            mentioned in # (greet.proto) part above. 
        c) If we move the mouse over the HelloRequest class, we will see a pop-up message which shows
            that the namespace of the HelloRequest class is GrpcDemo.HelloRequest
            ( see (3.)#(GreeterService.cs).png ) 
        d)  press F12 to go to the definition of the HelloRequest class in VS Code. You will be
            navigated to a Greet.cs file, which is located in the obj\Debug\net8.0\Protos folder.
            This file is generated by the proto file and contains the definition of the HelloRequest
            class.
        e) In the definition we can see that it implements the IMessage<HelloRequest> interface.
            IMessage<HelloRequest> interface  is defined in the Google.Protobuf package. All protobuf
            messages must implement this base interface.

                public sealed partial class HelloRequest : pb::IMessage<HelloRequest>

          - The HelloRequest class also has a Name property, which is defined in the proto file. It
            has a DebuggerNonUserCodeAttribute attribute.This attribute means that the Name member
            is not part of the user code for an application.
            The Name property also has a GeneratedCode attribute, which means this member is generated
            by the tooling. Specifically, the Name property is generated by the protoc tool, which
            is the protobuf compiler. Users should not modify this member.

                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public string Name {
                    get { return name_; }
                    set {
                        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

           - You can also find the definition of the HelloReply class in the Greet.cs file.
           - Next to the Greet.cs file, in the Protos folder, you can find a GreetGrpc.cs file.
            GreetGrpc.cs file defines the GreeterBase abstract class as the base class of the
            GreeterService class as stated in point a)
            Similarly, the GreeterBase class is also generated by the gRPC tooling. It contains the
            definition of the SayHello() method, as follows.
            The GreeterBase class is marked with the BindServiceMethod attribute, which means this
            method is the implementation of the SayHello() method defined in the proto file.
            The SayHello() method has an attribute called GeneratedCode that indicates that this
            class is generated by the gRPC C# plugin. 
            Inside the SayHello() method, you can see that it throws an exception by default.
            Because this method is virtual, we need to override this method in the GreeterService
            class to provide the actual implementation.

                [grpc::BindServiceMethod(typeof(Greeter), "BindService")]
                public abstract partial class GreeterBase
                {
                    /// <summary>
                    /// Sends a greeting
                    /// SayHello() method taking HelloRequest message as input and HelloReply message as output
                    /// </summary>
                    /// <param name="request">The request received from the client.</param>
                    /// <param name="context">The context of the server-side call handler being invoked.</param>
                    /// <returns>The response to send back to the client (wrapped by a task).</returns>
                    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
                    public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.HelloReply> SayHello(global::GrpcDemo.HelloRequest request, grpc::ServerCallContext context)
                    {
                        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
                    }
                }

    -----------------------------------------------------------------------------------------------------------

    #(Program.cs)

    var builder = WebApplication.CreateBuilder(args);

    // Add services to the container.
    builder.Services.AddGrpc();

    var app = builder.Build();

    // Configure the HTTP request pipeline.
    app.MapGrpcService<GreeterService>();
    app.MapGet("/", () => "Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909");

    app.Run();

    a) AddGrpc() method is called to add gRPC services to the service container.
    b) Then, we use the MapGrpcService<GreeterService>() method to map the GreeterService class to
        the gRPC service, which is similar to the MapControllers method in the RESTful API project.
    c)  MapGet() method is used to show a message if users access the root path of the application
        from a web browser.
        This is because gRPC services cannot be accessed by a web browser. So, we need to show a
        message to notify users that they need to use a gRPC client to access the gRPC service.
    
    -----------------------------------------------------------------------------------------------------------------------https://app.daily.dev/sources

- Open the greet.proto file and update the HelloRequest, as follows:
    
        message HelloRequest {
            string name = 1;
            string address = 2;
        }

    save the file and go back to GreeterService class. In the SayHello() method, we can try to access
    the Address property of the HelloRequest object. we will find that the Address property is not
    available. This is because the generated code is not updated.
    We need to regenerate the code by using the 'dotnet build' command. Alternatively, you can delete
    the obj folder and the code will be regenerated automatically. After running the build command,
    we will see that address field has been generated in the Greet.cs file which contains the definition
    of HelloRequest as mentioned above.

- we may find that it is not convenient to store the generated code in the obj folder. We can change
    the output directory of the generated code by using the OutputDir attribute in the Protobuf
    item in the .csproj file as: 

        <ItemGroup>
            <Protobuf Include="Protos\greet.proto" GrpcServices="Server" OutputDir="Generated" />
        </ItemGroup>

    -> Now, the generated code will be stored in the Generated\Protos folder.

- A proto file can generate multiple files for server-side code. for eg, the greet.proto file will
    generate the following files:
    • greet.cs: This file contains the definition of the messages and the methods to serialize and
                deserialize the messages
    • greetGrpc.cs: This file contains the definition of the base class of the service and the
                methods to bind the service to the server
