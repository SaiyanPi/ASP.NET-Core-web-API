Building a TypeScript clients:

- This application is just a normal HTML page that uses the SignalR JavaScript client library to
    communicate with the SignalR hub.
- TypeScript code is compiled into JavaScript code, so it can run in any JavaScript runtime, such as
    browsers and Node.js.

    (installing TypeScript)
    cmd: npm install -g TypeScript

    (checking the installed typescript version)
    cmd: tsc -v


Next. follows these steps to create a TypeScript client:

1) Create a new folder named ChatApp.TypeScriptClient in the solution folder. Then, create a src 
    folder in the ChatApp.TypeScriptClient folder. The src folder is used to store the source code
    of the TypeScript client.

2) Create a new file named index.html in the src folder and add the following code:

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Chat App</title>
    </head>
    <body>
        <div id="divChat">
            <label for="txtUsername">User Name</label>
            <input type="text" id="txtUsername" />
            <label for="txtMessage">Message</label>
            <input type="text" id="txtMessage" />
            <button id="btnSend">Send</button>
            <ul id="messages"></ul>
        </div>
    </body>
    </html>

3) Create a new file named tsconfig.json in the ChatApp.TypeScriptClient folder and add the following
    code:

    {
        "compilerOptions": {
            "noEmitOnError": true,
            "noImplicitAny": true,
            "sourceMap": true,
            "target": "es6",
            "moduleResolution":"node"
        },
        "files": ["src/app.ts"],
        "compileOnSave": true
    }

    * the preceeding code is the configuration file for the TypeScript compiler.
    * It specifies the target version of JavaScript, the module system, and other options. It also
        specifies the TypeScript files to compile, such as app.ts which we will create in step 6)

4) Next, we need to set up npm so that we can install the required packages. Use the following
    command to initialize npm:

    cmd: npm init -y

    * this command creates a package.json file in the ChatApp.TypeScriptClient folder.
    * package.json file is used to manage the dependencies of the project. It also contains other
        information about the project, such as name, version, description, and so on.

5) Next, we need to install the required packages. Use the following command to install the
    required packages:

    cmd: npm install @microsoft/signalr @types/node

    * @microsoft/signalr package is the official SignalR JavaScript client library.
    * the @types/node package is used to provide type definition for Node.js

6) Create a new file named app.ts in the src folder and add the following code.

    import * as signalR from "@microsoft/signalr";
    const txtUsername: HTMLInputElement = document.getElementById("txtUsername") as HTMLInputElement;
    const txtMessage: HTMLInputElement = document.getElementById("txtMessage") as HTMLInputElement;
    const btnSend: HTMLButtonElement = document.getElementById("btnSend") as HTMLButtonElement;
    btnSend.disabled = true;
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7202/chatHub")
        .build();
    connection.on("ReceiveMessage", (username: string, message: string) => {
        const li = document.createElement("li");
        li.textContent = `${username}: ${message}`;
        const messageList = document.getElementById("messages");
        messageList.appendChild(li);
        messageList.scrollTop = messageList.scrollHeight;
    });
    connection
        .start()
        .then(() => (btnSend.disabled = false))
        .catch((err) => console.error(err.toString()));
    txtMessage.addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
            sendMessage();
        }
    });
    btnSend.addEventListener("click", sendMessage);
    function sendMessage() {
        connection
            .invoke("SendMessage", txtUsername.value, txtMessage.value)
            .catch((err) => console.error(err.toString()))
            .then(() => (txtMessage.value = ""));
    }

    * preceeding code creates a SignalR connection to the SignalR hub.
    * connection object is used to send messages to the SignalR hub and receive messages from the
        SignalR hub.
    * WithURL() method is used to specify the URL of the SignalR hub. Our SignalR hub is hosted on a
        https://localhost:7202 (from section 3)
    * when the page is loaded, the Send button is disabled, then it will be enabled when the connection
        is established. The connection object has a couple of methods used in this sample.
        
        i. The start method: This is used to start the connection.

        ii. The on method: This method is used to receive messages from the SignalR hub. The on()
            method takes two parameters: the first parameter is the name of the method, which is
            RecieveMessage(), as we defined in the ChatHub class, and the second parameter is
            a callback function that is called when the message is received.
            
        iii. The invoke method: The invoke() method is called when the user clicks the Send button
            or presses the Enter key. The invoke() method takes three parameters: the first parameter
            is the name of the method we want to invoke on the SignalR hub, which is SendMessage(),
            as we defined in the ChatHub class, the second parameter is the username, and the third
            parameter is the message.

7) Next, we need to compile the TypeScript code to JavaScript code. We will use Gulp to automate
    the compilation process. If you prefer to use other tools, such as Webpack, you can use them
    as well. Use the following command to install Gulp globally:

    cmd: npm install -g gulp

8) Install gulp and gulp-typescript in the project.

    cmd: npm install --save-dev gulp gulp-typescript browserify vinyl-source-stream vinyl-buffer gulp-sourcemaps tsify

    * These packages are used to compile the TypeScript code to JavaScript code, generate a bundle
        file, and generate source map files.
    * the bundle file is used to load the SignalR JavaScript client library so that the client can
        use it to communicate with SignalR hub.
    * Source map files are used to map the JavaScriptcode to the original TypeScript code. This is
        useful when debugging the application.

9) Create a new file named gulpfile.js in the ChatApp.TypeScriptClient folder and add the following
    code:

    const gulp = require('gulp');
    const browserify = require('browserify');
    const source = require('vinyl-source-stream');
    const buffer = require('vinyl-buffer');
    const sourcemaps = require('gulp-sourcemaps');
    const tsify = require('tsify');
    // Bundle TypeScript with SignalR
    gulp.task('bundle', () => {
        return browserify({
            basedir: '.',
            debug: true,
            entries: ['src/app.ts'], // Replace with your TypeScript entry file
            cache: {},
            packageCache: {},
        })
        .plugin(tsify)
        .bundle()
        .pipe(source('bundle.js'))
        .pipe(buffer())
        .pipe(sourcemaps.init({ loadMaps: true }))
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('dist'));
    });
    // Copy HTML
    gulp.task('copy-html', () => {
        return gulp.src('src/**/*.html')
            .pipe(gulp.dest('dist'));
    });
    // Main build task
    gulp.task('default', gulp.series('bundle', 'copy-html'));

    * The gulp configuration file defines some tasks that are used to compile TypeScript code to
        JavaScript and generate a bundle file.
    * Additionally, it copies HTML files to the dist folder, which is used to store the compiled
        JavaScript code and HTML files. If desired, the folder name can be changed.
    * The bundle file loads the SignalR JavaScript client library and the compiled JavaScript code.

10) Add a script to the package.json file to run gulp tasks:

    "scripts": {
        "gulp": "gulp"
    }

    * The complete package.json file should look like this

    {
        "name": "chatapp.typescriptclient",
        "version": "1.0.0",
        "main": "index.js",
        "scripts": {
            "gulp": "gulp"
        },
        "keywords": [],
        "author": "",
        "license": "ISC",
        "description": "",
        "dependencies": {
            "@microsoft/signalr": "^8.0.7",
            "@types/node": "^22.13.10"
        },
        "devDependencies": {
            "browserify": "^17.0.1",
            "gulp": "^5.0.0",
            "gulp-sourcemaps": "^3.0.0",
            "gulp-typescript": "^6.0.0-alpha.1",
            "tsify": "^5.0.4",
            "vinyl-buffer": "^1.0.1",
            "vinyl-source-stream": "^2.0.0"
        }
    }

11) Next, update the index.html file in the src folder to load the bundle file: