AUTOMATIC RECONNECTING

- sometimes due to netwrok issues, the SignalR connection may be disconnected. for eg, if ethe user's
    device is switched off from the WiFi to cellular, or if the user's device is in a tunnel, the SignalR
    connection may be disconnected. in this case, we want the client to automatically reconnect to the
    server.
- SignalR allows the client to automatically reconnect to the server if the connection is dropped. the
    
A) following code shows how to configure the client to automatically reconnect to the server.

    1. TypeScript client =>

        connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7264/chatHub", {
                // omitted
            })
            .withAutomaticReconnect()
            .build();
        
        (configuring retry policy)
        * by default, when the connection is dropped, the client will try to reconnect to the SignalR
            server in 0, 2, 10, and 30 seconds.
        * we can configure the retry policy as:

            connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7264/chatHub", {
                // omitted
            })
            .withAutomaticReconnect([0, 5, 20])
            .build();

            -> withAutomaticReconnect() method accepts an array of numbers to configure the delay duration
                in milliseconds.
            -> in the preceeding code, the client will try to reconnect to the server in 0, 5, and 20 seconds.

    2. Blazor client =>

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7264/chatHub", options =>
            {
                // omitted
            })
            .WithAutomaticReconnect()
            .Build();

        (configuring retry policy)

        _hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7264/chatHub", options =>
        {
            // omitted
        })
        .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(5), 
            TimeSpan.FromSeconds(20) })
        .Build();

B) to test the automatic reconnection deature, we can add a label to show the connection status. Add the
    following code to the HTML content.

    (Typescript)

    <div class="form-group mb-3">
        <label>Status</label>
        <label id="lblStatus"></label>
    </div>

    (Blazor)

    <div class="form-group mb-3">
        <label>Status</label>
        <label>@_status</label>
    </div>

C) Then update the typescript and blazor code to show the connection status as:

    (TypeScript)

    try {
        // omitted
        connection.onclose(() => {
            lblStatus.textContent = "Disconnected.";
        });

        connection.onreconnecting((error) => {
            lblStatus.textContent = `${error} Reconnecting...`;
        });

        connection.onreconnected((connectionId) => {
            lblStatus.textContent = `Connected. ${connectionId}`;
        });
        
        await connection.start();
        lblStatus.textContent = `Connected. ${connection.connectionId}`;
        // omitted
    } catch (err) {
        lblStatus.textContent = `Disconnected. ${err.toString()}`;
        // omitted
    }

    (Blazor)

        // omitted
        _hubConnection.Closed += (error) =>
        {
            _status = $"Connection closed. {error?.Message}";
            return Task.CompletedTask;
        };

        _hubConnection.Reconnecting += (error) =>
        {
            _status = $"Reconnecting. {error?.Message}";
            return Task.CompletedTask;
        };

        _hubConnection.Reconnected += (connectionId) =>
        {
            _status = $"Reconnected. {connectionId}";
            return Task.CompletedTask;
        };

        await _hubConnection.StartAsync();
        _status = $"Connected. {_hubConnection.ConnectionId}";
        // omitted

D) we can also enable debug logging to see the connection status. the following code shows how to do this.

    connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7264/chatHub", {
            // omitted
        })
        .configureLogging(signalR.LogLevel.Debug)
        .withAutomaticReconnect()
        .build();

E) Run the SignalR server and the TypeScript client. Press F12 to open the developer tools for the TypeScript
    client. Click the Network tab, and you can change network conditions to simulate network issues.
    For example, you can change the network to Offline to simulate network disconnection.
    After changing network to Offline, wait for a few seconds(depending on the timeout configuration) and
    you should see the client trying to automatically reconnect to the server.
    Change the network back to Online, and you should see that the client reconnects to the server.
    see online-offline-simulation.png

IMPORTANT NOTE:
- if the client fails to reconnect to the server after trying 4 times, the onclose event will be triggered.
    you can add the event handler for the onclose event to handle the connection close event.
    for example, you can notify the user that the connection is closed and ask the user to refresh the page
    or manually reconnect to the server.

F) SignalR in ASP.NET Core 8.0 supports stateful reconnect, allowing the server to temporarily store
    messages when the client is disconnected. Upon reconnection, the client will use the same connection ID,
    and the server will replay any messages that were sent while the client was disconnected. This ensures
    that the clientâ€™s state is maintained and that no messages are lost.
    To enable stateful reconnect, we need to configure the AllowStatefulReconnects option for the SignalR
    hub endpoint as follows:
        (SignalR Server)

        //omitted
        app.MapHub<ChatHub>("/chatHub", options =>
        {
            // omitted
            options.AllowStatefulReconnects = true;
        });

        * by default, the maximum buffer size of the stateful reconnect is 100,000 byte. we can change the
            buffer size as follows:

        builder.Services.AddSignalR(options =>
        {
            // omitted
            options.StatefulReconnectBufferSize = 200000;
        });

G) then, we can configure the typescript and Blazor client to use the stateful reconnect as follows:

    (TypeScript)

    connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7264/chatHub", {
            // omitted
        })
        .withAutomaticReconnect()
        .withStatefulReconnect({ bufferSize: 200000 })
        .build();

    (Blazor)

    _hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7264/chatHub", options =>
        {
            options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
            options.AccessTokenProvider = () => Task.FromResult<string?>(_token);
        })
        .WithAutomaticReconnect()
        .WithStatefulReconnect()
        .Build();
    
    i) To configure the buffer size of the Blazor client, you can configure the HubConnectionOptions
        object as follows:

        var builder = new HubConnectionBuilder()
            .WithUrl("https://localhost:7264/chatHub", options =>
            {
                options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                options.AccessTokenProvider = () => Task.FromResult<string?>(_token);
            })
            .WithAutomaticReconnect()
            .WithStatefulReconnect();
            builder.Services.Configure<HubConnectionOptions>(options =>
            {
                options.StatefulReconnectBufferSize = 200000;
            });
            _hubConnection = builder.Build();
