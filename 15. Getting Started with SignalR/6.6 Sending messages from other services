Sending messages from other services:

- So far, we have implemented a chat app that allows users to send messages to other users or groups.
- Sometimes, we need to send messages from other places. for eg, when an event ocuurs, we may need to send
    a message to notify the users. In this section, we will expore how to send a messages from other
    services. (Source code is inside v4 folder)
- we will add a REST API endpoint to allow other systems to send messages to the SignalR hub.
    follow these steps to add a REST API endpoint in the ChatApp.Server application.

    1) Create the following models in the Models folder:

        public class SendToAllMessageModel
        {
            public string FromUser { get; set; } = string.Empty;
            public string Message { get; set; } = string.Empty;
        }
        public class SendToUserMessageModel
        {
            public string FromUser { get; set; } = string.Empty;
            public string ToUser { get; set; } = string.Empty;
            public string Message { get; set; } = string.Empty;
        }
        public class SendToGroupMessageModel
        {
            public string FromUser { get; set; } = string.Empty;
            public string GroupName { get; set; } = string.Empty;
            public string Message { get; set; } = string.Empty;
        }

        * these models are used to send messages to the SignalR hub.
    
    2) Create a new controller(ChatController) or use the existing account controller class as:

        [ApiController]
        [Route("[controller]")]
        public class ChatController(IHubContext<ChatHub, IChatClient> hubContext) : ControllerBase
        {
            [HttpPost("all")]
            public async Task<IActionResult> SendToAllMessage([FromBody] SendToAllMessageModel model)
            {
                if(ModelState.IsValid)
                {
                    await hubContext.Clients.All.ReceiveMessage(model.FromUser, model.Message);
                    return Ok();
                }
                return BadRequest(ModelState);
            }

            [HttpPost("user")]
            public async Task<IActionResult> SendToUserMessage([FromBody] SendToUserMessageModel model)
            {
                if(ModelState.IsValid)
                {
                    await hubContext.Clients.User(model.ToUser).ReceiveMessage(model.FromUser, model.Message);
                    return Ok();
                }
                return BadRequest(ModelState);
            }

            [HttpPost("group")]    
            public async Task<IActionResult> SendToGroupMessage([FromBody] SendToGroupMessageModel model)
            {
                if(ModelState.IsValid)
                {
                    await hubContext.Clients.Group(model.GroupName).ReceiveMessage(model.FromUser, model.Message);
                    return Ok();
                }
                return BadRequest(ModelState);
            }
        }

    * we inject the IHubContext<ChatHub, IChatClient> service into the ChatController class.
    * we use hubContext.Clients to send messages to the clients.
    * Note that, this endpoint is not authenticated, we can add authentication and authorization to this
        end point if required by adding Authorize attribute to the controller method.

    3) Run all 3 apaplication. Use different users to log in and join the group. Then, you can test the
        chat/all, chat/user, and chat/group endpoints using Postman or any other HTTP client.
        see message_from-external_services.png